# Python script to calculate the sigmoid
#   "calculate output of a neuron/logistic classifier"
# https://bah.udemy.com/course/data-science-logistic-regression-in-python/learn/lecture/3963272#overview

N,D = 100, 2

# create 100X2 data matrix
x = np.random.randn(N,D)
# need it to be 2D, to have N rows and 1 column
ones = np.array([[1]*N]).T
# concat data
xb = np.concatenate((ones, x), axis=1)
# initialize weight vector of length D+1
w = np.random.randn(D + 1)
# calculate dot product between each row of x and w
z = xb.dot(w)
z.shape#>> (100,)

def sigmid(z):
    """ Function that applies sigmoid operation """
    return 1/(1 + np.exp(-z))

sigmoid(z)
#>> array([ 0.05588992,  0.18827524,  0.10984947,  0.5869589 ,  0.04782601,
#>>        0.22979251,  0.23517578,  0.17624105,  0.73568609,  0.24408687,
#>>        0.436699  ,  0.16124438,  0.25980411,  0.07557106,  0.87719047,
#>>        0.50217965,  0.10046906,  0.97470265,  0.92382051,  0.68252917,
#>>        0.7578765 ,  0.87222972,  0.52890327,  0.00706788,  0.66684736,
#>>        0.89904522,  0.45552285,  0.04854458,  0.87195036,  0.00325868,
#>>        0.95643214,  0.43236513,  0.05936361,  0.25225603,  0.8199728 ,
#>>        0.97883875,  0.07183455,  0.27327119,  0.10642208,  0.22439041,
#>>        0.68165035,  0.66948362,  0.08410633,  0.07324409,  0.21821663,
#>>        0.02948921,  0.07337053,  0.84138422,  0.16038286,  0.82157004,
#>>        0.60688418,  0.15191376,  0.91288249,  0.56552893,  0.82292635,
#>>        0.51260697,  0.18552687,  0.08604659,  0.60694917,  0.17261503,
#>>        0.93148279,  0.06651777,  0.90127459,  0.03752795,  0.58042439,
#>>        0.98518   ,  0.52788983,  0.82662735,  0.93543929,  0.14978205,
#>>        0.60878606,  0.54831022,  0.29135941,  0.23977778,  0.07938759,
#>>        0.58780521,  0.11077181,  0.0482068 ,  0.06283512,  0.88768053,
#>>        0.49312165,  0.96239978,  0.11051291,  0.24828244,  0.02788809,
#>>        0.24485164,  0.27805748,  0.06501237,  0.34716292,  0.1296036 ,
#>>        0.74554184,  0.42137879,  0.91752514,  0.29024867,  0.51525061,
#>>        0.17832229,  0.74514137,  0.08204353,  0.10853518,  0.50108467])
